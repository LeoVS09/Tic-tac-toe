{"version":3,"sources":["core/utils.ts","actions/index.ts","core/defined.ts","core/unleash.ts","core/conflicts.ts","core/paradox.ts","routes.ts","containers/TopBar.tsx","pages/Loading.tsx","App.tsx","serviceWorker.ts","core/typings.ts","reducers/game.ts","reducers/index.ts","index.tsx"],"names":["lastFree","squares","i","length","searchSecondSymbol","map","index","first","square","Array","isArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","symbol","value","isEqualSymbols","err","return","haveSeveralVariants","second","step","cloneSquare","item","Object","D_Project_Tic_tac_toe_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","setSymbol","makeChoice","redux_starter_kit__WEBPACK_IMPORTED_MODULE_0__","createAction","searchEquivalentsInSquare","k","searchEquivalentSymbols","variants","firstSymbol","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","secondSymbol","push","unleash","squareIndexes","define","clonedMap","conflicts","findSymbolNotInList","_i","_conflicts","_ref2","list","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_loop2","squareSymbol","_step3","some","v","_loop","_iterator3","_ret","nextConflict","current","begin","result","searchDefinedParadox","defined","equivalent","indexes","symbols","equivalents","searchDefined","searchUndefinedParadox","searchConflicts","reverse","confrontation","home","help","TopBar","react_default","a","createElement","className","react_router_dom","to","routes","Loading","_ref","error","timedOut","pastDelay","retry","onClick","loadable","loader","Loadable","loading","PageLoading","delay","timeout","App","TopBar_TopBar","react_router","path","exact","component","e","then","bind","Boolean","window","location","hostname","match","GamerSymbol","state","fill","nextSymbol","X","isStepStart","reducer","game","createReducer","_createReducer","defineProperty","actions","type","payload","freeIndex","nextMap","O","store","configureStore","basename","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4afcb2e.chunk.js","sourcesContent":["import {GameMap, MapSymbol} from \"./typings\";\n\nexport function lastFree(squares: Array<MapSymbol | null> ) {\n    for (let i = 0; i < squares.length; i++)\n        if (squares[i] === null)\n            return i;\n\n    return -1;\n}\n\nexport function searchSecondSymbol(map: GameMap, index: number, first: MapSymbol): number {\n    for(let i = 0; i < map.length; i++) {\n        const square = map[i]\n        if(i === index || !Array.isArray(square))\n            continue\n\n        for(let symbol of square)\n            if(symbol && isEqualSymbols(symbol,first))\n                return i;\n\n    }\n\n    return -1\n}\n\nexport function haveSeveralVariants(square: Array<MapSymbol | null> | MapSymbol): boolean {\n    if(!Array.isArray(square))\n        return false;\n\n    for (let i = 0; i < 2 && i < square.length; i++)\n        if (!square[i])\n            return false;\n\n    return true;\n}\n\nexport const isEqualSymbols = (first: MapSymbol,second: MapSymbol) =>\n    first.symbol === second.symbol &&\n    first.step === second.step;\n\nexport function cloneSquare<T>(square: Array<T>): Array<T> {\n    return square.map(item => item && {...item})\n}\n","import {createAction} from 'redux-starter-kit'\n\nexport const setSymbol = createAction('game/set-symbol')\n\nexport const makeChoice = createAction('game/make-choice')\n","import {GameMap, MapSymbol} from \"./typings\";\nimport {haveSeveralVariants, isEqualSymbols} from \"./utils\";\n\nexport interface DefinedSymbols {\n    indexes: Array<number>,\n    symbols: Array<MapSymbol>\n}\n\n// Search symbols which can be defined based on paradoxes\nexport function searchDefined(map: GameMap): DefinedSymbols | null {\n    for(let i = 0; i < map.length; i++) {\n        let equivalent = searchEquivalentsInSquare(map[i]);\n        if (equivalent)\n            return {\n                indexes: [i],\n                symbols: [equivalent]\n            };\n    }\n\n    for(let i = 0; i < map.length; i++) {\n        if (!haveSeveralVariants(map[i]))\n            continue\n\n        for (let k = i + 1; k < map.length; k++) {\n\n            const first = map[i]\n            const second = map[k]\n            if(!Array.isArray(first) || !Array.isArray(second))\n                continue\n\n            const equivalents = searchEquivalentSymbols(first, second);\n\n            if (equivalents)\n                return {\n                    indexes: [i, k],\n                    symbols: equivalents\n                }\n\n        }\n    }\n\n    return null\n}\n\n\nfunction searchEquivalentsInSquare(square: Array<MapSymbol | null> | MapSymbol) {\n    if(!Array.isArray(square))\n        return null;\n\n    for(let i = 0; i < square.length; i++) {\n        if(!square[i])\n            break\n\n        for(let k = i + 1; k < square.length; k++) {\n            if(!square[k])\n                break\n\n            if (\n                square[i]!.symbol === square[k]!.symbol &&\n                square[i]!.step === square[k]!.step\n            )\n                return square[i]\n\n        }\n    }\n\n    return null;\n}\n\nfunction searchEquivalentSymbols(first: Array<MapSymbol | null>, second: Array<MapSymbol | null>): Array<MapSymbol> | null {\n    let variants: Array<MapSymbol> = [];\n\n    for(const firstSymbol of first){\n        if(!firstSymbol)\n            break\n\n        for(const secondSymbol of second)\n            if(secondSymbol && isEqualSymbols(firstSymbol, secondSymbol))\n                variants.push(firstSymbol)\n    }\n\n    if(variants.length < 2)\n        return null;\n\n    if(variants.length === 2) {\n        if (variants[0].symbol === variants[1].symbol)\n            return variants;\n    }\n\n    return null\n}\n","import {cloneSquare, isEqualSymbols, searchSecondSymbol} from \"./utils\";\nimport {GameMap, MapSymbol} from \"./typings\";\n\nexport interface Conflict {\n    index: number\n    symbol: MapSymbol\n}\n\nexport default function unleash(map: GameMap, squareIndexes: Array<number>, define: Array<MapSymbol>){\n    const clonedMap: GameMap = map.map(square => {\n        if(!Array.isArray(square))\n            return square\n\n        return cloneSquare(square)\n    })\n\n    let conflicts: Array<Conflict> = [];\n    do{\n        conflicts = [];\n        for (const index of squareIndexes) {\n            const square = clonedMap[index]\n\n            if (!Array.isArray(square))\n                continue\n\n            const symbol = findSymbolNotInList(square, define)\n            if(symbol)\n                conflicts.push({\n                    index,\n                    symbol\n                });\n        }\n\n        for (const {index, symbol} of conflicts) {\n            const second = searchSecondSymbol(clonedMap, index, symbol);\n\n            if(second === -1)\n                continue\n\n            squareIndexes.push(second);\n            define.push(symbol);\n        }\n\n    } while (conflicts.length !== 0);\n\n    let k = 0;\n    for(let i of squareIndexes)\n        clonedMap[i] = define[k++];\n\n    return clonedMap;\n}\n\nfunction findSymbolNotInList(square: Array<MapSymbol | null>, list: Array<MapSymbol>) {\n\n    for(const squareSymbol of square){\n        if(!squareSymbol)\n            break\n\n        if(!list.some(symbol => isEqualSymbols(squareSymbol, symbol)))\n            return squareSymbol\n    }\n\n    return null;\n}\n","import {DefinedSymbols} from \"./defined\";\nimport {haveSeveralVariants, isEqualSymbols, searchSecondSymbol} from \"./utils\";\nimport {GameMap, MapSymbol} from \"./typings\";\n\n// Search symbols which have conflicts to another symbols\nexport default function searchConflicts(map: GameMap): DefinedSymbols | null {\n\n    for(let i = 0; i < map.length; i++){\n        const square = map[i]\n        if(!square)\n            break\n\n        if(!Array.isArray(square))\n            continue\n\n        if(!haveSeveralVariants(square))\n            continue\n\n        for(const symbol of square){\n            if(!symbol)\n                continue\n\n            const index = searchSecondSymbol(map, i, symbol)\n            const second = nextConflict(map, index, symbol, i) as false | MapSymbol;\n\n            if (second) {\n                const secondIndex = searchSecondSymbol(map, i, second)\n                return {\n                    indexes: [i, secondIndex],\n                    symbols: [symbol, second]\n                }\n            }\n        }\n    }\n\n    return null\n}\n\nfunction nextConflict(map: GameMap, current: number, first: MapSymbol, begin: number): boolean | MapSymbol {\n    const square = map[current]\n    if(!Array.isArray(square))\n        return false\n\n    if(!haveSeveralVariants(square))\n        return false;\n\n    if(current === begin)\n        return true;\n\n    for(const symbol of square) {\n        if (!symbol)\n            continue\n\n        if (isEqualSymbols(symbol, first))\n            continue\n\n        const index = searchSecondSymbol(map, current, symbol)\n        const result = nextConflict(map, index, symbol, begin);\n\n        if (result)\n            return typeof result === 'boolean' ? symbol : result\n    }\n\n    return false\n}\n\n","import {GameMap, MapSymbol} from \"./typings\";\nimport {searchDefined} from \"./defined\";\nimport unleash from \"./unleash\";\nimport searchConflicts from \"./conflicts\";\nimport {cloneSquare} from \"./utils\";\n\nexport interface DefinedParadox {\n    isDefined: true\n    nextMap: GameMap\n}\n\nexport interface UndefinedParadox {\n    variants: Array<GameMap>\n    confrontation: {\n        index: number\n        variants: Array<MapSymbol>\n    }\n}\n\nexport function searchDefinedParadox(map: GameMap): GameMap | null {\n    const defined = searchDefined(map)\n    if(!defined)\n        return null\n\n    const {indexes, symbols} = defined\n    return unleash(map, indexes, symbols)\n}\n\nexport function searchUndefinedParadox(map: GameMap): UndefinedParadox | null {\n    const conflicts = searchConflicts(map);\n    if(!conflicts)\n        return null;\n\n    const {indexes, symbols} = conflicts;\n\n    const variants = [\n        unleash(map, indexes, cloneSquare(symbols)),\n        unleash(map, indexes, cloneSquare(symbols).reverse())\n    ]\n\n    return {\n        variants,\n        confrontation: {\n            index: indexes[0],\n            variants: symbols\n        }\n    };\n}\n\n\n","\n// Using routes as constants allow import it from any point of app and use in Link component\n// Write url in Link component as string may cause bugs and may be difficult change some routes\n\nexport const home = '/'\nexport const help = '/help'\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as routes from '../routes'\nimport './TopBar.scss'\n\nexport default function TopBar () {\n    return (\n        <header className='top-bar'>\n            <Link to={routes.home} className='top-bar__header'>\n                <h1><span className=\"top-bar__quant\">Quantum</span> tic-tac-toe<sup><small>v0.5.3</small></sup></h1>\n            </Link>\n            <div className='top-bar__menu'>\n                <Link to={routes.help} >\n                    <span>Rules</span>\n                </Link>\n            </div>\n        </header>\n    )\n}\n","import React from 'react';\nimport {LoadingComponentProps} from 'react-loadable';\n\n// TODO: add styles\n\nexport default function({error, timedOut, pastDelay, retry}: LoadingComponentProps){\n    if (error)\n        return <div>Error! <button onClick={ retry }>Retry</button></div>;\n\n    if (timedOut)\n        return <div>Taking a long time... <button onClick={ retry }>Retry</button></div>;\n\n    if (pastDelay)\n        return <div>Loading...</div>;\n\n    return null;\n}\n","import React from 'react';\nimport Loadable from 'react-loadable';\nimport {Switch, Route, RouteComponentProps} from \"react-router-dom\";\nimport './App.scss';\nimport * as routes from './routes'\nimport TopBar from './containers/TopBar'\nimport PageLoading from './pages/Loading'\n\n// Generate component which will be loaded only on render\nconst loadable = (loader: () => Promise<React.ComponentType<any> | { default: React.ComponentType<any> }>) => Loadable({\n    loader,\n    loading: PageLoading,\n    delay: 200, // Delay before display loading indicator\n    timeout: 2000 // Timeout to change loading indicator as \"long time loading\"\n});\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <TopBar />\n\n            <Switch>\n                <Route\n                    path={routes.home} exact\n                    component={loadable(() => import('./pages/Game'))}\n                />\n                <Route\n                    path={routes.help}\n                    component={loadable(() => import('./pages/Help'))}\n                />\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","export enum GamerSymbol {\n    X = 'X',\n    O = 'O'\n}\n\n// Symbol which have been set in map on defined step\nexport interface MapSymbol {\n    symbol: GamerSymbol\n    step: number\n}\n// Map defined 9 squares which can contain one defined symbol\n// or multiple parallel existing symbols\nexport type GameMap = Array<Array<MapSymbol | null> | MapSymbol>\n","import {createReducer} from 'redux-starter-kit'\nimport * as actions from '../actions'\nimport {GameMap, GamerSymbol, MapSymbol} from \"../core/typings\";\nimport {lastFree} from \"../core/utils\";\nimport {searchDefinedParadox} from \"../core/paradox\";\n\nexport interface GameState {\n    map: GameMap\n    step: number\n    // If step start then user can define two parallel existing symbols in two places\n    isStepStart: boolean\n    nextSymbol: GamerSymbol\n}\n\nconst state: GameState = {\n    map: Array<Array<MapSymbol|null>>(9).fill(Array(9).fill(null)),\n    step: 1,\n    nextSymbol: GamerSymbol.X,\n    isStepStart: true\n}\n\nconst gameReducer = createReducer(state, {\n    // User trying set symbol on map\n    [actions.setSymbol.type]: (state, {payload: index}) => {\n        const square = state.map[index]\n\n        // If square where user try set symbol not defined\n        if(!Array.isArray(square))\n            return;\n\n        const freeIndex = lastFree(square)\n        if(freeIndex === -1)\n            return;\n\n        square[freeIndex] = {\n            symbol: state.nextSymbol,\n            step: state.step\n        }\n\n        // Find paradox and set new game map if can\n        const nextMap = searchDefinedParadox(state.map)\n        if(nextMap)\n            state.map = nextMap\n\n        state.isStepStart = !state.isStepStart\n\n        if(!state.isStepStart)\n            return;\n\n        state.nextSymbol = state.nextSymbol === GamerSymbol.X ?\n            GamerSymbol.O :\n            GamerSymbol.X\n\n        state.step += 1\n    },\n\n    // User choose which reality will be exist\n    [actions.makeChoice.type]: (state, {payload: map}) => {\n        if(map.some((item: any) => !item))\n            return\n\n        state.map = map\n    }\n})\n\nexport default gameReducer\n","import game from './game'\nimport {configureStore} from 'redux-starter-kit'\nimport {GameState} from \"./game\";\n\nexport interface AppState {\n    game: GameState\n}\n\nconst reducer = {\n    game\n}\n\nexport const store = configureStore<AppState>({\n    reducer\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux'\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './reducers'\n// Mount point for app\n\nlet basename = ''\nif(process.env.NODE_ENV === 'production')\n    basename = 'Tic-tac-toe/'\n\nReactDOM.render(\n    // Attach routing to application\n    <BrowserRouter basename={basename} >\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>,\n    // This will find root element and attach application to DOM\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}